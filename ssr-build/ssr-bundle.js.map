{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../node_modules/.pnpm/preact-router@3.2.1_preact@10.6.6/node_modules/preact-router/match.js","webpack:///external \"preact\"","webpack:///../src/util.js","webpack:///../src/index.js","webpack:///./routes/home/style.css?f7d2","webpack:///./routes/home/index.tsx","webpack:///./routes/notfound/style.css?05a0","webpack:///./routes/notfound/index.tsx","webpack:///./components/header/style.css?723a","webpack:///./components/header/index.tsx","webpack:///./components/app.tsx","webpack:///./index.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Link","Match","undefined","_extends","assign","target","arguments","length","source","_preact","require","_preactRouter","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_Component","_temp","_this","this","_len","args","Array","_key","apply","concat","update","url","nextUrl","setState","subClass","superClass","constructor","writable","configurable","setPrototypeOf","__proto__","_inherits","componentDidMount","subscribers","push","componentWillUnmount","splice","indexOf","render","props","getCurrentUrl","path","replace","children","matches","exec","Component","_ref","activeClassName","obj","keys","_objectWithoutProperties","h","href","_ref2","class","className","filter","Boolean","join","default","EMPTY","let","route","opts","ret","reg","match","split","decodeURIComponent","slice","segmentize","max","Math","charAt","param","flags","plus","star","val","map","pathRankSort","a","b","rank","index","prepareVNodeForRanking","vnode","rankSegment","rankChild","segment","customHistory","ROUTERS","location","getCurrentLocation","pathname","search","canRoute","type","history","setUrl","routeTo","didRoute","routeFromLink","node","getAttribute","handleLinkClick","e","ctrlKey","metaKey","altKey","shiftKey","button","currentTarget","prevent","stopImmediatePropagation","stopPropagation","preventDefault","delegateLinkHandler","String","nodeName","toUpperCase","hasAttribute","parentNode","eventListenersInitialized","Router","super","state","addEventListener","static","onChange","const","toChildArray","getMatchingChildren","updating","forceUpdate","unlisten","listen","invoke","sort","newProps","ref","cloneElement","ref$1","active","current","previous","previousUrl","router","createElement","onClick","Route","component","Home","style","Notfound","Header","xmlns","xmlnsXlink","width","height","viewBox","id","data-name","xlinkHref","x","App"],"mappings":"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","file":"ssr-bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"qVkA\");\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports.Link = exports.Match = undefined;\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _preact = require('preact');\n\nvar _preactRouter = require('preact-router');\n\nfunction _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Match = exports.Match = function (_Component) {\n\t_inherits(Match, _Component);\n\n\tfunction Match() {\n\t\tvar _temp, _this, _ret;\n\n\t\t_classCallCheck(this, Match);\n\n\t\tfor (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t\t\targs[_key] = arguments[_key];\n\t\t}\n\n\t\treturn _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.update = function (url) {\n\t\t\t_this.nextUrl = url;\n\t\t\t_this.setState({});\n\t\t}, _temp), _possibleConstructorReturn(_this, _ret);\n\t}\n\n\tMatch.prototype.componentDidMount = function componentDidMount() {\n\t\t_preactRouter.subscribers.push(this.update);\n\t};\n\n\tMatch.prototype.componentWillUnmount = function componentWillUnmount() {\n\t\t_preactRouter.subscribers.splice(_preactRouter.subscribers.indexOf(this.update) >>> 0, 1);\n\t};\n\n\tMatch.prototype.render = function render(props) {\n\t\tvar url = this.nextUrl || (0, _preactRouter.getCurrentUrl)(),\n\t\t    path = url.replace(/\\?.+$/, '');\n\t\tthis.nextUrl = null;\n\t\treturn props.children({\n\t\t\turl: url,\n\t\t\tpath: path,\n\t\t\tmatches: (0, _preactRouter.exec)(path, props.path, {}) !== false\n\t\t});\n\t};\n\n\treturn Match;\n}(_preact.Component);\n\nvar Link = function Link(_ref) {\n\tvar activeClassName = _ref.activeClassName,\n\t    path = _ref.path,\n\t    props = _objectWithoutProperties(_ref, ['activeClassName', 'path']);\n\n\treturn (0, _preact.h)(\n\t\tMatch,\n\t\t{ path: path || props.href },\n\t\tfunction (_ref2) {\n\t\t\tvar matches = _ref2.matches;\n\t\t\treturn (0, _preact.h)(_preactRouter.Link, _extends({}, props, { 'class': [props.class || props.className, matches && activeClassName].filter(Boolean).join(' ') }));\n\t\t}\n\t);\n};\n\nexports.Link = Link;\nexports.default = Match;\n\nMatch.Link = Link;\n","module.exports = require(\"preact\");","\nconst EMPTY = {};\n\nexport function assign(obj, props) {\n\t// eslint-disable-next-line guard-for-in\n\tfor (let i in props) {\n\t\tobj[i] = props[i];\n\t}\n\treturn obj;\n}\n\nexport function exec(url, route, opts) {\n\tlet reg = /(?:\\?([^#]*))?(#.*)?$/,\n\t\tc = url.match(reg),\n\t\tmatches = {},\n\t\tret;\n\tif (c && c[1]) {\n\t\tlet p = c[1].split('&');\n\t\tfor (let i=0; i<p.length; i++) {\n\t\t\tlet r = p[i].split('=');\n\t\t\tmatches[decodeURIComponent(r[0])] = decodeURIComponent(r.slice(1).join('='));\n\t\t}\n\t}\n\turl = segmentize(url.replace(reg, ''));\n\troute = segmentize(route || '');\n\tlet max = Math.max(url.length, route.length);\n\tfor (let i=0; i<max; i++) {\n\t\tif (route[i] && route[i].charAt(0)===':') {\n\t\t\tlet param = route[i].replace(/(^:|[+*?]+$)/g, ''),\n\t\t\t\tflags = (route[i].match(/[+*?]+$/) || EMPTY)[0] || '',\n\t\t\t\tplus = ~flags.indexOf('+'),\n\t\t\t\tstar = ~flags.indexOf('*'),\n\t\t\t\tval = url[i] || '';\n\t\t\tif (!val && !star && (flags.indexOf('?')<0 || plus)) {\n\t\t\t\tret = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatches[param] = decodeURIComponent(val);\n\t\t\tif (plus || star) {\n\t\t\t\tmatches[param] = url.slice(i).map(decodeURIComponent).join('/');\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\telse if (route[i]!==url[i]) {\n\t\t\tret = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (opts.default!==true && ret===false) return false;\n\treturn matches;\n}\n\nexport function pathRankSort(a, b) {\n\treturn (\n\t\t(a.rank < b.rank) ? 1 :\n\t\t\t(a.rank > b.rank) ? -1 :\n\t\t\t\t(a.index - b.index)\n\t);\n}\n\n// filter out VNodes without attributes (which are unrankeable), and add `index`/`rank` properties to be used in sorting.\nexport function prepareVNodeForRanking(vnode, index) {\n\tvnode.index = index;\n\tvnode.rank = rankChild(vnode);\n\treturn vnode.props;\n}\n\nexport function segmentize(url) {\n\treturn url.replace(/(^\\/+|\\/+$)/g, '').split('/');\n}\n\nexport function rankSegment(segment) {\n\treturn segment.charAt(0)==':' ? (1 + '*+?'.indexOf(segment.charAt(segment.length-1))) || 4 : 5;\n}\n\nexport function rank(path) {\n\treturn segmentize(path).map(rankSegment).join('');\n}\n\nfunction rankChild(vnode) {\n\treturn vnode.props.default ? 0 : rank(vnode.props.path);\n}\n","import { cloneElement, createElement, Component, toChildArray } from 'preact';\nimport { exec, prepareVNodeForRanking, assign, pathRankSort } from './util';\n\nlet customHistory = null;\n\nconst ROUTERS = [];\n\nconst subscribers = [];\n\nconst EMPTY = {};\n\nfunction setUrl(url, type='push') {\n\tif (customHistory && customHistory[type]) {\n\t\tcustomHistory[type](url);\n\t}\n\telse if (typeof history!=='undefined' && history[type+'State']) {\n\t\thistory[type+'State'](null, null, url);\n\t}\n}\n\n\nfunction getCurrentUrl() {\n\tlet url;\n\tif (customHistory && customHistory.location) {\n\t\turl = customHistory.location;\n\t}\n\telse if (customHistory && customHistory.getCurrentLocation) {\n\t\turl = customHistory.getCurrentLocation();\n\t}\n\telse {\n\t\turl = typeof location!=='undefined' ? location : EMPTY;\n\t}\n\treturn `${url.pathname || ''}${url.search || ''}`;\n}\n\n\n\nfunction route(url, replace=false) {\n\tif (typeof url!=='string' && url.url) {\n\t\treplace = url.replace;\n\t\turl = url.url;\n\t}\n\n\t// only push URL into history if we can handle it\n\tif (canRoute(url)) {\n\t\tsetUrl(url, replace ? 'replace' : 'push');\n\t}\n\n\treturn routeTo(url);\n}\n\n\n/** Check if the given URL can be handled by any router instances. */\nfunction canRoute(url) {\n\tfor (let i=ROUTERS.length; i--; ) {\n\t\tif (ROUTERS[i].canRoute(url)) return true;\n\t}\n\treturn false;\n}\n\n\n/** Tell all router instances to handle the given URL.  */\nfunction routeTo(url) {\n\tlet didRoute = false;\n\tfor (let i=0; i<ROUTERS.length; i++) {\n\t\tif (ROUTERS[i].routeTo(url)===true) {\n\t\t\tdidRoute = true;\n\t\t}\n\t}\n\tfor (let i=subscribers.length; i--; ) {\n\t\tsubscribers[i](url);\n\t}\n\treturn didRoute;\n}\n\n\nfunction routeFromLink(node) {\n\t// only valid elements\n\tif (!node || !node.getAttribute) return;\n\n\tlet href = node.getAttribute('href'),\n\t\ttarget = node.getAttribute('target');\n\n\t// ignore links with targets and non-path URLs\n\tif (!href || !href.match(/^\\//g) || (target && !target.match(/^_?self$/i))) return;\n\n\t// attempt to route, if no match simply cede control to browser\n\treturn route(href);\n}\n\n\nfunction handleLinkClick(e) {\n\tif (e.ctrlKey || e.metaKey || e.altKey || e.shiftKey || e.button!==0) return;\n\trouteFromLink(e.currentTarget || e.target || this);\n\treturn prevent(e);\n}\n\n\nfunction prevent(e) {\n\tif (e) {\n\t\tif (e.stopImmediatePropagation) e.stopImmediatePropagation();\n\t\tif (e.stopPropagation) e.stopPropagation();\n\t\te.preventDefault();\n\t}\n\treturn false;\n}\n\n\nfunction delegateLinkHandler(e) {\n\t// ignore events the browser takes care of already:\n\tif (e.ctrlKey || e.metaKey || e.altKey || e.shiftKey || e.button!==0) return;\n\n\tlet t = e.target;\n\tdo {\n\t\tif (String(t.nodeName).toUpperCase()==='A' && t.getAttribute('href')) {\n\t\t\tif (t.hasAttribute('native')) return;\n\t\t\t// if link is handled by the router, prevent browser defaults\n\t\t\tif (routeFromLink(t)) {\n\t\t\t\treturn prevent(e);\n\t\t\t}\n\t\t}\n\t} while ((t=t.parentNode));\n}\n\n\nlet eventListenersInitialized = false;\n\nfunction initEventListeners() {\n\tif (eventListenersInitialized) return;\n\n\tif (typeof addEventListener==='function') {\n\t\tif (!customHistory) {\n\t\t\taddEventListener('popstate', () => {\n\t\t\t\trouteTo(getCurrentUrl());\n\t\t\t});\n\t\t}\n\t\taddEventListener('click', delegateLinkHandler);\n\t}\n\teventListenersInitialized = true;\n}\n\n\nclass Router extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tif (props.history) {\n\t\t\tcustomHistory = props.history;\n\t\t}\n\n\t\tthis.state = {\n\t\t\turl: props.url || getCurrentUrl()\n\t\t};\n\n\t\tinitEventListeners();\n\t}\n\n\tshouldComponentUpdate(props) {\n\t\tif (props.static!==true) return true;\n\t\treturn props.url!==this.props.url || props.onChange!==this.props.onChange;\n\t}\n\n\t/** Check if the given URL can be matched against any children */\n\tcanRoute(url) {\n\t\tconst children = toChildArray(this.props.children);\n\t\treturn this.getMatchingChildren(children, url, false).length > 0;\n\t}\n\n\t/** Re-render children with a new URL to match against. */\n\trouteTo(url) {\n\t\tthis.setState({ url });\n\n\t\tconst didRoute = this.canRoute(url);\n\n\t\t// trigger a manual re-route if we're not in the middle of an update:\n\t\tif (!this.updating) this.forceUpdate();\n\n\t\treturn didRoute;\n\t}\n\n\tcomponentWillMount() {\n\t\tROUTERS.push(this);\n\t\tthis.updating = true;\n\t}\n\n\tcomponentDidMount() {\n\t\tif (customHistory) {\n\t\t\tthis.unlisten = customHistory.listen((location) => {\n\t\t\t\tthis.routeTo(`${location.pathname || ''}${location.search || ''}`);\n\t\t\t});\n\t\t}\n\t\tthis.updating = false;\n\t}\n\n\tcomponentWillUnmount() {\n\t\tif (typeof this.unlisten==='function') this.unlisten();\n\t\tROUTERS.splice(ROUTERS.indexOf(this), 1);\n\t}\n\n\tcomponentWillUpdate() {\n\t\tthis.updating = true;\n\t}\n\n\tcomponentDidUpdate() {\n\t\tthis.updating = false;\n\t}\n\n\tgetMatchingChildren(children, url, invoke) {\n\t\treturn children\n\t\t\t.filter(prepareVNodeForRanking)\n\t\t\t.sort(pathRankSort)\n\t\t\t.map( vnode => {\n\t\t\t\tlet matches = exec(url, vnode.props.path, vnode.props);\n\t\t\t\tif (matches) {\n\t\t\t\t\tif (invoke !== false) {\n\t\t\t\t\t\tlet newProps = { url, matches };\n\t\t\t\t\t\tassign(newProps, matches);\n\t\t\t\t\t\tdelete newProps.ref;\n\t\t\t\t\t\tdelete newProps.key;\n\t\t\t\t\t\treturn cloneElement(vnode, newProps);\n\t\t\t\t\t}\n\t\t\t\t\treturn vnode;\n\t\t\t\t}\n\t\t\t}).filter(Boolean);\n\t}\n\n\trender({ children, onChange }, { url }) {\n\t\tlet active = this.getMatchingChildren(toChildArray(children), url, true);\n\n\t\tlet current = active[0] || null;\n\n\t\tlet previous = this.previousUrl;\n\t\tif (url!==previous) {\n\t\t\tthis.previousUrl = url;\n\t\t\tif (typeof onChange==='function') {\n\t\t\t\tonChange({\n\t\t\t\t\trouter: this,\n\t\t\t\t\turl,\n\t\t\t\t\tprevious,\n\t\t\t\t\tactive,\n\t\t\t\t\tcurrent\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn current;\n\t}\n}\n\nconst Link = (props) => (\n\tcreateElement('a', assign({ onClick: handleLinkClick }, props))\n);\n\nconst Route = props => createElement(props.component, props);\n\nRouter.subscribers = subscribers;\nRouter.getCurrentUrl = getCurrentUrl;\nRouter.route = route;\nRouter.Router = Router;\nRouter.Route = Route;\nRouter.Link = Link;\nRouter.exec = exec;\n\nexport { subscribers, getCurrentUrl, route, Router, Route, Link, exec };\nexport default Router;\n","// extracted by mini-css-extract-plugin\nexport default {\"home\":\"home__uRcqa\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.css';\n\nconst Home: FunctionalComponent = () => {\n  return (\n    <div className={style.home}>\n      <h2>Title</h2>\n      <p>Paragraph text.</p>\n      <p>Available for purchase via <a href={'https://www.trademe.co.nz/a/search?member_listing=1402299&search_string=bambina'}>TradeMe</a></p>\n    </div>\n  );\n};\n\nexport default Home;\n","// extracted by mini-css-extract-plugin\nexport default {\"notfound\":\"notfound__Ecgkh\"};","import { FunctionalComponent, h } from 'preact';\nimport { Link } from 'preact-router/match';\nimport style from './style.css';\n\nconst Notfound: FunctionalComponent = () => {\n  return (\n    <div class={style.notfound}>\n      <h1>Error 404</h1>\n      <p>That page doesn&apos;t exist.</p>\n      <Link href=\"/\">\n        <h4>Back to Home</h4>\n      </Link>\n    </div>\n  );\n};\n\nexport default Notfound;\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"header__OVZyn\"};","import { FunctionalComponent, h } from 'preact';\nimport style from './style.css';\n\nconst Header: FunctionalComponent = () => {\n  return (\n    <header className={style.header}>\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n        width=\"120\"\n        height=\"auto\"\n        viewBox=\"0 0 362 161\"\n      >\n        <image\n          id=\"Layer_0\"\n          data-name=\"Layer 0\"\n          width=\"362\"\n          height=\"161\"\n          xlinkHref=\"data:img/png;base64,\"\n        />\n      </svg>\n      <div style={{ height: '2rem' }} />\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlnsXlink=\"http://www.w3.org/1999/xlink\"\n        width=\"80vw\"\n        height=\"42\"\n        viewBox=\"0 0 744 84\"\n      >\n        <image\n          x=\"-1\"\n          width=\"745\"\n          height=\"85\"\n          xlinkHref=\"data:img/png;base64,\"\n        />\n      </svg>\n    </header>\n  );\n};\n\nexport default Header;\n","import { FunctionalComponent, h } from 'preact';\nimport { Route, Router } from 'preact-router';\n\nimport Home from '../routes/home';\nimport NotFoundPage from '../routes/notfound';\nimport Header from './header';\n\nconst App: FunctionalComponent = () => {\n  return (\n    <div id=\"preact_root\">\n      <Header />\n      <Router>\n        <Route path=\"/\" component={Home} />\n        <NotFoundPage default />\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import './style/index.css';\nimport App from './components/app';\n\nexport default App;\n"],"sourceRoot":""}